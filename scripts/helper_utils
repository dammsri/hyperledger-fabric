#!/bin/bash

### Dammavalam, Srirangam
### 20-OCT-2022

#-------------------------
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_BLUE='\033[0;34m'
C_YELLOW='\033[1;33m'

#---------------------------------------------
# get_val function to get value of a variable
# get_val <var>
#---------------------------------------------
get_val() {
  _var1=$1
  echo ${!_var1}
}

#-------------------------------------------------------
# wait_for_seconds function to display wait/progress bar
# while waiting for a process or event to be completed
# wait_for_seconds <wait_seconds>
#-------------------------------------------------------
wait_for_seconds() {
  _wait_sec=$1
  _cur_sec=1
  #_pchar="â–‡"
  _pchar="#"
  _pstr="["
  #for __sec__ in $(seq 1 $_wait_sec); do _pstr=$(echo "${_pstr}."); done
  for ((_sec = 1; _sec <= $_wait_sec; _sec++)); do _pstr=$(echo "${_pstr}."); done
  _pstr=$(echo "${_pstr}]")
  echo -ne "$_pstr\r["
  while [ $_cur_sec -le $_wait_sec ]; do
    echo -n "$_pchar"
    sleep 1
    let _cur_sec++
  done
  echo
}

wait_for_process() {
  pid_to_poll=$1
  pbar_str="#"
  echo -ne "\r"
  until [ $(ps -p $pid_to_poll | grep -c $pid_to_poll) -eq 0 ]; do
    echo -n "${pbar_str}"
    sleep 1
  done
  echo ""
}

wait_for_file() {
  file_to_check=$1
  pbar_str="#"
  echo -ne "\r"
  until [ -f "$file_to_check" ]; do
    echo -n "${pbar_str}"
    sleep 1
  done
  echo ""
}

# println echos string
function println() {
  echo -e "$1"
}

# errorln echos in red color
function errorln() {
  println "${C_RED}${1}${C_RESET}"
}

# successln echos in green color
function successln() {
  println "${C_GREEN}${1}${C_RESET}"
}

# infoln echos in blue color
function infoln() {
  println "${C_BLUE}${1}${C_RESET}"
}

# warnln echos in yellow color
function warnln() {
  println "${C_YELLOW}${1}${C_RESET}"
}

# fatalln echos in red color and exits with fail status
function fatalln() {
  errorln "$1"
  exit 1
}

export -f errorln
export -f successln
export -f infoln
export -f warnln

verify_result() {
  if [ $1 -ne 0 ]; then
    fatalln "$2"
  fi
}

check_pre_reqs() {
  jq --version >/dev/null 2>&1

  if [[ $? -ne 0 ]]; then
    errorln "jq command not found..."
    exit 1
  fi
}

print_header() {
  max_len=40
  for n in "$@"; do [[ ${#n} -gt $max_len ]] && { max_len=${#n}; }; done
  echo -ne "+"
  for n in $(seq 1 $((max_len + 2))); do echo -ne "-"; done
  echo -ne "+\n"
  printf "| %-${max_len}s |\n" "$(date)"
  printf "| %-${max_len}s |\n" " "
  printf "|$(tput bold) %-${max_len}s $(tput sgr0)|\n" "$@"
  echo -ne "+"
  for n in $(seq 1 $((max_len + 2))); do echo -ne "-"; done
  echo -ne "+\n"
}

parse_template() {
  _template_file=$1
  _output_file=$2

  eval "cat <<EOF
$(cat $_template_file)
EOF
" >>$_output_file
}
